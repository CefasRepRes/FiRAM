R_low <- rep(757600, 40)
R_med <- rep(8606000, 40)
R_hig <- rep(23151200, 40)
R_ran <- rnorm(40, 8606000, 100)
#Running the FishRAM model for each
sim_low <- project(params, R = R_low)
sim_med <- project(params, R = R_med)
sim_hig <- project(params, R = R_hig)
sim_ran <- project(params, R = R_ran)
plot.ts(0.169*sim_low@states$TC, main = )
library(FishRAM)
set.seed(12)
data("seabass")
# Recruitment scenarios
R_low <- rep(757600, 40)
R_med <- rep(8606000, 40)
R_hig <- rep(23151200, 40)
R_ran <- rnorm(40, 8606000, 100)
#Running the FishRAM model for each
sim_low <- project(params, R = R_low)
sim_med <- project(params, R = R_med)
sim_hig <- project(params, R = R_hig)
sim_ran <- project(params, R = R_ran)
plot.ts(0.169*sim_hig@states$TC, main = "CO2 emissions", ylab="tonnes CO2")
lines(1:40, 0.169*sim_low@states$TC, col = "red")
lines(1:40, 0.169*sim_med@states$TC, col = "blue")
lines(1:40, 0.169*sim_ran@states$TC, col = "green")
min(2, 3, 4)
min(c(1,2,3), c(2,3,4), c(41,-1))
library(FishRAM)
set.seed(12)
data("seabass")
# Recruitment scenarios
R_low <- rep(757600, 40)
R_med <- rep(8606000, 40)
R_hig <- rep(23151200, 40)
R_ran <- rnorm(40, 8606000, 100)
#Running the FishRAM model for each
sim_low <- project(params, R = R_low)
sim_med <- project(params, R = R_med)
sim_hig <- project(params, R = R_hig)
sim_ran <- project(params, R = R_ran)
#Number of trips for each
T_low <- sim_low@states$TC
T_med <- sim_med@states$TC
T_hig <- sim_hig@states$TC
T_ran <- sim_ran@states$TC
plot.ts(0.169*T_low, main = "CO2 emissions", ylab="tonnes CO2", ylim = c(min(T_low, T_med, T_hig, T_ran), max(T_low, T_med, T_hig, T_ran)))
lines(1:40, 0.169*T_med, col = "red")
lines(1:40, 0.169*T_hig, col = "blue")
lines(1:40, 0.169*T_ran, col = "green")
c(min(T_low, T_med, T_hig, T_ran), max(T_low, T_med, T_hig, T_ran))
0.169*c(min(T_low, T_med, T_hig, T_ran), max(T_low, T_med, T_hig, T_ran))
plot.ts(0.169*T_low, main = "CO2 emissions", ylab="CO2 emissions (tonnes)", ylim = 0.169*c(min(T_low, T_med, T_hig, T_ran), max(T_low, T_med, T_hig, T_ran)))
lines(1:40, 0.169*T_med, col = "red")
lines(1:40, 0.169*T_hig, col = "blue")
lines(1:40, 0.169*T_ran, col = "green")
plot.ts(0.169*T_low, main = "CO2 emissions", ylab="CO2 emissions (tonnes)", ylim = 0.169*c(min(T_low, T_med, T_hig, T_ran), max(T_low, T_med, T_hig, T_ran)))
lines(1:40, 0.169*T_med, col = "red")
lines(1:40, 0.169*T_hig, col = "blue")
#lines(1:40, 0.169*T_ran, col = "green")
plot.ts(0.169*T_low, main = "CO2 emissions", ylab="CO2 emissions (tonnes)", ylim = 0.169*c(min(T_low, T_med, T_hig, T_ran), max(T_low, T_med, T_hig, T_ran)))
lines(1:40, 0.169*T_med, col = "red")
lines(1:40, 0.169*T_hig, col = "blue")#
#lines(1:40, 0.169*T_ran, col = "green")
plot.ts(0.169*T_low, main = "CO2 emissions", ylab="CO2 emissions (tonnes)", ylim = 0.169*c(min(T_low, T_med, T_hig, T_ran), max(T_low, T_med, T_hig, T_ran)))
lines(1:40, 0.169*T_med, col = "red")
#lines(1:40, 0.169*T_hig, col = "blue")
#lines(1:40, 0.169*T_ran, col = "green")
library(FishRAM)
set.seed(12)
data("seabass")
# Recruitment scenarios
R_low <- rep(757600, 40)
R_hig <- rep(23151200, 40)
R_var <- c(rep(23151200, 20), rep(757600, 20)) #High followed by low
#Running the FishRAM model for each
sim_low <- project(params, R = R_low)
sim_hig <- project(params, R = R_hig)
sim_var <- project(params, R = R_var)
#Number of trips for each
T_low <- sim_low@states$TC
T_med <- sim_med@states$TC
T_var <- sim_var@states$TC
library(FishRAM)
set.seed(12)
data("seabass")
# Recruitment scenarios
R_low <- rep(757600, 40)
R_hig <- rep(23151200, 40)
R_var <- c(rep(23151200, 20), rep(757600, 20)) #High followed by low
#Running the FishRAM model for each
sim_low <- project(params, R = R_low)
sim_hig <- project(params, R = R_hig)
sim_var <- project(params, R = R_var)
#Number of trips for each
T_low <- sim_low@states$TC
T_hig <- sim_hig@states$TC
T_var <- sim_var@states$TC
plot.ts(0.169*T_low, main = "CO2 emissions", ylab="CO2 emissions (tonnes)", ylim = 0.169*c(min(T_low), max(T_hig)))
lines(1:40, 0.169*T_med, col = "red")
lines(1:40, 0.169*T_var, col = "red")
#lines(1:40, 0.169*T_hig, col = "blue")
#lines(1:40, 0.169*T_ran, col = "green")
plot.ts(0.169*T_low, main = "CO2 emissions", ylab="CO2 emissions (tonnes)", ylim = 0.169*c(min(T_low), max(T_hig)))
lines(1:40, 0.169*T_med, col = "red")
lines(1:40, 0.169*T_var, col = "blue")
#lines(1:40, 0.169*T_hig, col = "blue")
#lines(1:40, 0.169*T_ran, col = "green")
legend(0, 1000, c("Low recruitment", "High recruitment", "Variable recruitment"), col = 1:3, lty=1)
plot.ts(0.169*T_low, main = "Annual CO2 emissions", ylab="CO2 emissions (tonnes)", ylim = 0.169*c(min(T_low), max(T_hig)))
lines(1:40, 0.169*T_med, col = "red")
lines(1:40, 0.169*T_var, col = "blue")
legend(0, 1000, c("Low recruitment", "High recruitment", "Variable recruitment"), col = 1:3, lty=1)
plot.ts(0.169*T_low, main = "Annual CO2 emissions", ylab="CO2 emissions (tonnes)", ylim = 0.169*c(min(T_low), max(T_hig)))
lines(1:40, 0.169*T_med, col = 1)
lines(1:40, 0.169*T_var, col = 2)
legend(0, 1000, c("Low recruitment", "High recruitment", "Variable recruitment"), col = 1:3, lty=1)
devtools::build_manual()
data("seabass")
R <- c(rep(23151200, 20), rep(757600, 20))
sim <- project(params, R = R)
plot(sim)
sim@states$ER
library(FishRAM)
data("seabass")
R <- c(rep(23151200, 20), rep(757600, 20))
sim <- project(params, R = R)
plot(sim)
26413/9
26413/(9*365.25)
24*365.25
26413/9
203**.8442+213*0.0382+203*.1176
no_trips*0.5
#trip*0.5*xx*0.7*fuel consumption..
2020-2000+1
length(2000:2020)
class(class)
#' Constructor for the `BioeconomicParams` class
#'
#' A constructor for the `BioeconomicParams` class.
#'@param file A csv file contatining the input parameters and their values
#'@return An object of type \code{\linkS4class{BioeconomicParams}}
#'@details
#'The `file` params csv file should contain all parameter values required to run the model (see the \code{\linkS4class{BioeconomicParams}} class definition for a full list of required parameters), the first column containing the parameter names and the second column containing the corresponding values.
#'@export
#'@examples
#'\dontrun{
#'params <- BioeconomicParams(file = "params.csv")
#'}
BioeconomicParams <- function(file) {
params_raw <- read.csv(file)[, 1:2]
params_raw <- split(params_raw[, 2], params_raw[, 1])
bioeceonomic_params <- do.call(function(...) new('BioeconomicParams', ...), params_raw)
return(bioeceonomic_params)
}
setClassUnion("funcorNULL", members = c("function", "NULL"))
setClassUnion("numorNULL", members = c("numeric", "NULL"))
#### Class definition ####
#' A class for bioeconomic parameters.
#' @slot g The magnitude of commercial trip change per year.
#' @slot p The magnitude of recreational trip change per year.
#' @slot b Recreational catch per effort threshold.
#' @slot qC Commercial catchability per effort.
#' @slot qR Recreational catchability per effort.
#' @slot muA The natural mortality of the adult stock.
#' @slot muJ The natural mortality of the juvenile stock.
#' @slot chiR Effort per recreational trip.
#' @slot chiC Days per commercial trip.
#' @slot theta Max number of commercial trips per year.
#' @slot gamma Max number of recreational trips per year.
#' @slot delta Proportion of recreational catch released.
#' @slot varphi Proportion of released recreational catch that survives.
#' @slot eta Commercial discard rate.
#' @slot Gamma Proportion of commercial discards that survive.
#' @slot WR Average weight of recreationally landed fish (tonnes).
#' @slot WC Average weight of commercial landed fish (tonnes).
#' @slot nu Commercial fish price per tonnes.
#' @slot baromega Variable cost per commercial day at sea.
#' @slot Lambda Proportion fixed cost attributable to sea bass.
#' @slot phi Fixed cost per fleet per year.
#' @slot sigma GVA multiplier for commercial Revenue.
#' @slot lambda Average per trip expenditure of recreational anglers.
#' @slot zeta GVA multiplier for recreational trip expenditure.
#' @slot initialSJ The starting value of the size of the juvenile stock (in numbers).
#' @slot initialSA The starting value of the size of the adult stock (in numbers).
#' @slot initialTC The starting value for the number of commercial trips.
#' @slot initialTR The starting value for the number of recreational trips.
#' @export
setClass(
"BioeconomicParams",
slots = c(theta = "numeric",
gamma = "numeric",
g = "numeric",
p = "numeric",
b = "numeric",
WR = "numeric",
WC = "numeric",
phiC = "numeric",
phiR = "numeric",
muA = "numeric",
muJ = "numeric",
sigma = "numeric",
zeta = "numeric",
nu = "numeric",
baromega = "numeric",
phi = "numeric",
lambda = "numeric",
chiR = "numeric",
chiC = "numeric",
delta = "numeric",
eta = "numeric",
Lambda = "numeric",
initialSJ = "numeric",
initialSA = "numeric",
initialTC = "numeric",
initialTR = "numeric",
varphi = "numeric",
Gamma = "numeric",
qC = "numeric",
qR = "numeric",
CLimFunc = "funcorNULL",
CLimAlloc = "numorNULL")
)
BioeconomicParams(file = "../zzMovedToClearUp/params.csv")
is.numeric(params@CLimAlloc[1]) &&
params@CLimAlloc[1] == 0
params <- BioeconomicParams(file = "../zzMovedToClearUp/params.csv")
is.numeric(params@CLimAlloc[1]) &&
params@CLimAlloc[1] == 0
x <- 7;
if(x > 7){
y <- 90
}
print(exists("y"))
x <- 21;
if(x > 7){
y <- 90
}
print(exists("y"))
rm("x", "Y")
rm("x", "y")
rm("y")
params@muA
?EnsemblePrior
?EcoEnsemble::EnsemblePrior
?EcoEnsemble::generate_sample
t_com_catch_limit_reached
?FishRAM::`FishRAM-package`
203**.8442+213*0.0382+203*.1176
203*.8442+213*0.0382+203*.1176
203*.8442+213*0.0382+203*.1176
203*.8442+213*0.0382+203*.1176
203.382 * 67.03174
0.013 * 7.4
0.013 * 1000
0.096/1000
0.096/1000 * 7 * 12 * 0.5 * 3.664
0.096/1000 * 7 * 12 * 0.7 *3.67
0.096/1000 * 12 * 0.7 *3.67
library(devtools)
library(pkgbuild)
library(roxygen2)
class(class)
?do.call()
f <- function(x) print(x)
f(A)
f(432)
do.call(f, 432)
do.call(f, list(432))
person <- function(x, ....){return()}
c(person("Angela", "Muench", email = "angela.muench@cefas.co.uk", role = c("aut", "cre")),
comment = c(ORCID = "0000-0002-3785-0426"),
person("James", "Martindale", email = "james.martindale@cefas.co.uk", role = "aut",
comment = c(ORCID = "0000-0002-1913-5592")),
person("Hannah", "Tidbury", email = "hannah.tidbury@cefas.co.uk", role = "ctb",
comment = c(ORCID = "0000-0001-8549-3518"))
)
person <- function(x, email = "", comment = c("")){return(email + comment[1])}
c(person("Angela", "Muench", email = "angela.muench@cefas.co.uk", role = c("aut", "cre")),
comment = c(ORCID = "0000-0002-3785-0426"),
person("James", "Martindale", email = "james.martindale@cefas.co.uk", role = "aut",
comment = c(ORCID = "0000-0002-1913-5592")),
person("Hannah", "Tidbury", email = "hannah.tidbury@cefas.co.uk", role = "ctb",
comment = c(ORCID = "0000-0001-8549-3518"))
)
person <- function(x, email = "", comment = c(""), role = ""){return(email + comment[1])}
c(person("Angela", "Muench", email = "angela.muench@cefas.co.uk", role = c("aut", "cre")),
comment = c(ORCID = "0000-0002-3785-0426"),
person("James", "Martindale", email = "james.martindale@cefas.co.uk", role = "aut",
comment = c(ORCID = "0000-0002-1913-5592")),
person("Hannah", "Tidbury", email = "hannah.tidbury@cefas.co.uk", role = "ctb",
comment = c(ORCID = "0000-0001-8549-3518"))
)
person <- function(x, email = "", comment = c(""), role = ""){}
c(person("Angela", "Muench", email = "angela.muench@cefas.co.uk", role = c("aut", "cre")),
comment = c(ORCID = "0000-0002-3785-0426"),
person("James", "Martindale", email = "james.martindale@cefas.co.uk", role = "aut",
comment = c(ORCID = "0000-0002-1913-5592")),
person("Hannah", "Tidbury", email = "hannah.tidbury@cefas.co.uk", role = "ctb",
comment = c(ORCID = "0000-0001-8549-3518"))
)
person <- function(x, email = "", comment = c(""), role = "", ...){}
c(person("Angela", "Muench", email = "angela.muench@cefas.co.uk", role = c("aut", "cre")),
comment = c(ORCID = "0000-0002-3785-0426"),
person("James", "Martindale", email = "james.martindale@cefas.co.uk", role = "aut",
comment = c(ORCID = "0000-0002-1913-5592")),
person("Hannah", "Tidbury", email = "hannah.tidbury@cefas.co.uk", role = "ctb",
comment = c(ORCID = "0000-0001-8549-3518"))
)
person("Angela", "Muench", email = "angela.muench@cefas.co.uk", role = c("aut", "cre")),
comment = c(ORCID = "0000-0002-3785-0426")
library(FishRAM)
?project
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030)
library(FishRAM)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030)
library(FishRAM)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030)
sim
EcoEnsemble::SSB_obs
writeLines(EcoEnsemble::SSB_obs)
stop(EcoEnsemble::SSB_obs)
warning(EcoEnsemble::SSB_obs)
warning(EcoEnsemble::SSB_obs[1, ])
warning(writeLines(EcoEnsemble::SSB_obs[1, ]))
warning(paste0(EcoEnsemble::SSB_obs[1, ], collapse = " "))
library(FishRAM)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030)
library(FishRAM)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030)
library(FishRAM)
library(FishRAM)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030)
library(FishRAM)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030)
library(FishRAM)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030)
plot(sim)
params@initialSA
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(1000000)}, CLim_alloc = c(2y3yg1u))
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(1000000)}, CLim_alloc = c(2, 2))
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(1000000)}, CLim_alloc = c(1, 0))
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(1000000)}, CLim_alloc = c(1, 0)); plot(sim)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(1000000)}, CLim_alloc = c(0, 1)); plot(sim)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(1000000)}, CLim_alloc = c(1, 0)); plot(sim)
sim@states$TC
sim@states$CLim
library(FishRAM)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(1000000)}, CLim_alloc = c(1, 0)); plot(sim)
sim@states$CLim
sim@states$SA
sim@states$SA[1]
sim@CLim_func(sim@states$SA[1])
library(FishRAM)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(1000000)}, CLim_alloc = c(1, 0)); plot(sim)
sim@CLim_func(sim@states$SA[1])
sim@states$CLim
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(1000000)}, CLim_alloc = c(1, 0)); plot(sim)
library(FishRAM)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(1000000)}, CLim_alloc = c(0.1, 0.9)); plot(sim)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(1000000)}, CLim_alloc = c(0, 1)); plot(sim)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(1000000)}, CLim_alloc = c(1, 0)); plot(sim)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(100000000)}, CLim_alloc = c(1, 0)); plot(sim)
sim@states$CLim
sim@states$CAllocCom
library(FishRAM)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(100000000)}, CLim_alloc = c(1, 0)); plot(sim)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(100000000)}, CLim_alloc = c(0, 1)); plot(sim)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(100000000)}, CLim_alloc = c(1, 0)); plot(sim)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(1000000)}, CLim_alloc = c(1, 0)); plot(sim)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(10000)}, CLim_alloc = c(1, 0)); plot(sim)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(100)}, CLim_alloc = c(1, 0)); plot(sim)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(10000000)}, CLim_alloc = c(1, 0)); plot(sim)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(10000000)}, CLim_alloc = c(1, 0)); plot(sim)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = NULL, CLim_alloc = c(1, 0)); plot(sim)
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030,
CLim_func = function(x){return(10000000)}, CLim_alloc = c(1, 0)); plot(sim)
CLim_func <- function(stock){
return(0.203/(0.203 + 0.24) * stock * (1 - exp(-(0.203 + 0.24)))
}
CLim_func <- function(stock){
return(0.203/(0.203 + 0.24) * stock * (1 - exp(-(0.203 + 0.24))))
}
CLim_func(params@initialSA)
sim <- project(params, R = rec_func, t_start = 2010, t_end = 2050, R_init = 1e4, CLim_func = CLim_func, CLim_alloc = c(1,0))
rec_func <- function(stock){
return(
1.5@*stock/(7e-4 + 1.3e-4 @* 1.5e-3 @* stock)@*exp(rnorm(1,mean=0,sd=0.9))
)
}
rec_func <- function(stock){
return(
1.5*stock/(7e-4 + 1.3e-4 * 1.5e-3 * stock)@*exp(rnorm(1,mean=0,sd=0.9))
)
}
?project
rec_func <- function(stock){
#'   return(
#'     1.5*stock/(7e-4 + 1.3e-4 * 1.5e-3 * stock)*exp(rnorm(1,mean=0,sd=0.9))
#'   )
#' }
rec_func <- function(stock){
return(
1.5*stock/(7e-4 + 1.3e-4 * 1.5e-3 * stock)*exp(rnorm(1,mean=0,sd=0.9))
)
}
sim <- project(params, R = rec_func, t_start = 2010, t_end = 2050, R_init = 1e4, CLim_func = CLim_func, CLim_alloc = c(1,0))
plot(sim)
sim <- project(params, R = rec_func, t_start = 2010, t_end = 2050, R_init = 1e4, CLim_func = CLim_func, CLim_alloc = c(0.5,0.5))
plot(sim)
sim <- project(params, R = rec_func, t_start = 2010, t_end = 2050, R_init = 1e4, CLim_func = CLim_func, CLim_alloc = c(0, 1))
plot(sim)
?project
data("seabass")
sim <- project(params, R = 8606000, t_start = 1990, t_end = 2030)
#Runs the simulation with 20 years of high recruitment followed
#by 20 years of low recruitment
R <- c(rep(23151200, 20), rep(757600, 20))
sim <- project(params, R = R)
#Generates recruitment from a type II functional response
#recruitment function with log Gaussian noise.
rec_func <- function(stock){
return(
1.5*stock/(7e-4 + 1.3e-4 * 1.5e-3 * stock)*exp(rnorm(1,mean=0,sd=0.9))
)
}
sim <- project(params, R = rec_func, t_start = 2010, t_end = 2050, R_init = 1e4)
# Including management strategies
# MSY as calculated by the original Tidbury paper
CLim_func <- function(stock){
return(0.203/(0.203 + 0.24) * stock * (1 - exp(-(0.203 + 0.24))))
}
# All allocated to the commercial fleet
sim <- project(params, R = rec_func, t_start = 2010, t_end = 2050, R_init = 1e4, CLim_func = CLim_func, CLim_alloc = c(1,0))
# All allocated to the recreational fleet
sim <- project(params, R = rec_func, t_start = 2010, t_end = 2050, R_init = 1e4, CLim_func = CLim_func, CLim_alloc = c(0, 1))
# Allocated equally across both fleets
sim <- project(params, R = rec_func, t_start = 2010, t_end = 2050, R_init = 1e4, CLim_func = CLim_func, CLim_alloc = c(0.5,0.5))
plot(sim)
?`BioeconomicSim-class`
class(sim:states)
class(sim@states)
library(devtools)
library(pkgbuild)
library(roxygen2)
needs_compile()
roxygenize()
install()
devtools::build()
devtools::install()
devtools::install()
